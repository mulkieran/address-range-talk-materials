#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
%\usetheme{Warsaw}
\usetheme{Boadilla}
% or ...

\usecolortheme{orchid}
\setbeamertemplate{footline}[text line]{} % makes the footer EMPTY

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans lmss
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Computation and Representation of Address Ranges
\end_layout

\begin_layout Subtitle
With an Introduction to the Python 
\family typewriter
justbytes
\family default
 Library
\end_layout

\begin_layout Author
Anne Mulhern
\end_layout

\begin_layout Institute
Red Hat, Inc.
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Audience
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Programmers who write code that must compute with and represent address
 ranges.
\end_layout

\begin_layout Itemize
If you have never needed to discover free space on a device\SpecialChar \ldots{}
then this talk
 is probably not for you.
\end_layout

\begin_layout Itemize
If you have never written code to display or calculate the size of a device\SpecialChar \ldots{}
then
 the second part of the talk is not for you.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Expectations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
What this talk will include.
\end_layout

\begin_layout Itemize
A little bit of personal experience.
\end_layout

\begin_layout Itemize
Some math.
\end_layout

\begin_layout Itemize
Some opinion.
\end_layout

\begin_layout Itemize
Some Python code.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Domain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Allocating space on devices.
\end_layout

\begin_layout Itemize
Partitions
\end_layout

\begin_layout Itemize
Caches
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not the Domain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Where this is not an issue.
\end_layout

\begin_layout Itemize
Bandwidth
\end_layout

\begin_layout Itemize
Sales
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not the Domain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
When it is just a question of the amount being moved.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Gravel_and_aggregates_sorting_plant,_Alexandra_Dock,_Hull.jpg
	scale 20

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Domain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Allocating address regions is a 
\emph on
layout
\emph default
 problem.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename geometry.jpg
	scale 10

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
The Rest
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Only discussing the domain.
\end_layout

\begin_layout Itemize
Dealing with amounts is hard 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Numerical Computing with IEEE Floating Point Arithmetic
\begin_inset Quotes erd
\end_inset

 by Michael L.
 Overton but also 
\begin_inset Quotes eld
\end_inset

The End of Error: Unum Computing
\begin_inset Quotes erd
\end_inset

 by John L.
 Gustafson.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Comparing apples with slightly larger apples
\begin_inset Foot
status open

\begin_layout Plain Layout
You can say you have more apples if you use the smaller ones.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_1.png
	scale 30

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Confession
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
This is a hard problem?!
\end_layout

\begin_layout Standard
Until I started working on software supporting block devices I would not
 have though that this was a difficult subject.
 But it is.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Nomenclature
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
For purposes of discussion...
\end_layout

\begin_layout Description
Range The word I use when I mean the size of an allocated partition, or
 of my computer's RAM, or the block size on a disk.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Topics
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Problems to cover.
\end_layout

\begin_layout Description
Computation doing arithmetic with address range
\end_layout

\begin_layout Description
Display communicating address range values to a human reader
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Showing values to a human reader.
\end_layout

\begin_layout Standard
It is the business of the client to determine the 
\emph on
appearance
\emph default
 of the display; the library should return a 
\emph on
structure
\emph default
 representing a value to display to the client.
 How the structure is determined should be configurable
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
justbytes-gui
\family default
 (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://pypi.python.org/pypi/justbytes-gui/)
\end_layout

\end_inset

is a simple library for experimenting with the existing display options
 in the
\family typewriter
 justbytes
\family default
 library.
\end_layout

\end_inset

.
 
\begin_inset Graphics
	filename justbytesgui.png
	scale 25

\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display Structure
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Relevant information about the display value.
\end_layout

\begin_layout Itemize
Display Value (D)
\end_layout

\begin_deeper
\begin_layout Itemize
Sign
\end_layout

\begin_layout Itemize
Integer Part
\end_layout

\begin_layout Itemize
Non-Repeating Fractional Part
\end_layout

\begin_layout Itemize
Repeating Fractional Part
\end_layout

\begin_layout Itemize
Base
\end_layout

\end_deeper
\begin_layout Itemize
Relation of D to actual value (V) in units (U)
\end_layout

\begin_layout Itemize
Units (U)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display Structure Examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Default choices for the display value for 
\begin_inset Formula $32\,\mathtt{GiB}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Configuration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sign
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[3, 2]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exact Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-Repeating Fractional Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Digits after Radix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repeating Fractional Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounding Factor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rounding Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
half 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GiB
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display Structure Examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Consequences of choice of SI units for display of 
\begin_inset Formula $32\,\mathtt{GiB}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Configuration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sign
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
[3, 4]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exact Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-Repeating Fractional Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
[3, 6]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Digits after Radix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repeating Fractional Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounding Factor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rounding Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
half 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
>
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
GB
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display Structure Examples
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Consequences of some choices for display of 
\begin_inset Formula $32\,\mathtt{GiB}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Configuration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Structure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
1000
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sign
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Integer Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
[34, 359]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exact Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Non-Repeating
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
[738,368]
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Digits after Radix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Repeating
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounding Factor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
1000
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rounding Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
half 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Bold
status open

\begin_layout Plain Layout
MB
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Value Configuration
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle

\family typewriter
justbytes
\family default
' defaults for the 
\family typewriter
getStringInfo()
\family default
 method.
\end_layout

\begin_layout Standard
The computation of the display value is configurable, because it is not
 clear that there is just one best solution.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value Configuration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
True
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Exact Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Max Digits after Radix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bounding Factor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rounding Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
half 0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset

Given IEC units, I would prefer base 1024.
 
\begin_inset Formula $32GiB+512B$
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

> 32.00 GiB
\begin_inset Quotes erd
\end_inset

 with defaults; with base 1024 it is 
\begin_inset Quotes eld
\end_inset

32.0~0~512
\begin_inset Quotes erd
\end_inset

, i.e., precisely 32 GiB, 0 MiB, 0 KiB and 512 B.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display Configuration
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle

\family typewriter
justbytes
\family default
' defaults for the 
\family typewriter
__str__
\family default
 method.
\end_layout

\begin_layout Standard
The display choices are configurable, because it is not clear that there
 is just one best solution.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Display Configuration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show Base Prefix
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show Base Subscript
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Digits Separator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
~
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Use Letters for Digits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
True
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Capitalize Digit Letters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strip Trailing Zeros
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strip Trailing Zeros if Exact
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
False
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strip Trailing Zeros if Exact Whole Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
True
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Show Relation of Display Value to Actual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
True
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
There is a lot more information in 
\begin_inset Quotes eld
\end_inset

> 1.00 TiB
\begin_inset Quotes erd
\end_inset

 than there is in 
\begin_inset Quotes eld
\end_inset

1.00 TiB
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Display
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Summary
\begin_inset Foot
status open

\begin_layout Plain Layout
For technical reasons I ended up writing a separate library, 
\family typewriter
justbases
\family default
, to handle the computation of the representation of the numeric value;
 it has a GUI as well: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://pypi.python.org/pypi/justbases-gui/0.1.0
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
There is no single obvious best choice for certain display options.
\end_layout

\begin_layout Itemize
IEC units are most informative when coupled with base 1024.
\end_layout

\begin_layout Itemize
Showing relation of displayed value to actual value is a good idea.
\end_layout

\begin_layout Itemize
The client code decides the 
\emph on
appearance
\emph default
, but justbytes decides the 
\emph on
value
\emph default
 of the display representation based on configuration options.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Computation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Rules for arithmetic operations.
\end_layout

\begin_layout Itemize
Types are 
\emph on
always correct
\emph default
.
\end_layout

\begin_layout Itemize
Results are 
\emph on
always exact
\emph default
.
\end_layout

\begin_layout Itemize
Operands are 
\emph on
never floats
\emph default
.
\end_layout

\begin_layout Itemize
Results of computations never yield ranges to any power but 1.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Types are 
\emph on
Always
\emph default
 Correct
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The usual rules of high-school arithmetic are 
\emph on
strictly
\emph default
 followed
\begin_inset Foot
status open

\begin_layout Plain Layout
The formal type rules are stated in the 
\family typewriter
justbytes
\family default
 comments for the various operations
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Just as 
\begin_inset Formula $1\,\mathrm{gallon}+\pi$
\end_inset

 is meaningless, so is 
\begin_inset Formula $32\,\mathrm{GiB}+64$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Some idiosyncracies of the Python libraries make it attractive to be able
 to add numbers to ranges, but this is not really a good idea.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Just as 
\begin_inset Formula $\frac{1\,\mathrm{gallon}}{2}$
\end_inset

 is 
\begin_inset Formula $\frac{1}{2}\,\mathrm{gallon}$
\end_inset

, so 
\begin_inset Formula $\frac{32\,\mathrm{GiB}}{2}$
\end_inset

 is 
\begin_inset Formula $16\,\mathrm{GiB}$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Results are 
\emph on
Always
\emph default
 Exact
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
There is no implicit rounding.
\end_layout

\begin_layout Standard
This means that 
\begin_inset Formula $\frac{1}{3}32\,\mathrm{GiB}=10\frac{2}{3}\,\mathrm{GiB}$
\end_inset

 which is 
\begin_inset Formula $11453246122\frac{2}{3}\,\mathrm{B}$
\end_inset

.
 The sole motivation is so that the ordinary rules of arithmetic are preserved,
 i.e., associativity, distributivity, and so forth hold when computing with
 ranges.
 The sole drawback is that if a whole number of bytes is sought for the
 result, as is typical, the result must be explicitly rounded.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operands are 
\emph on
Never
\emph default
 floats
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Because most programmers do not have a good understanding of floats.
\end_layout

\begin_layout Standard
They tend to forget all sorts of things, like:
\end_layout

\begin_layout Itemize
\begin_inset Formula $0.3\neq\frac{3}{10}$
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
It's closer to 
\begin_inset Formula $\frac{5404319552844595}{18014398509481984}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There are a very large number of pairs of floats such that 
\begin_inset Formula $x\neq y$
\end_inset

 but 
\begin_inset Formula $\frac{x+y}{2}\in\left\{ x,y\right\} $
\end_inset

.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Results of Computations Never Yield Ranges to any Power but 1.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
No operation is allowed that would result in a Range with units that could
 not reasonably be used as a partition size.
\end_layout

\begin_layout Description
Forbidden: 
\begin_inset Formula $R^{R}$
\end_inset

, 
\end_layout

\begin_layout Description
Permitted: 
\begin_inset Formula $R+R$
\end_inset

, 
\begin_inset Formula $nR$
\end_inset

, 
\begin_inset Formula $R/R$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Operands are Never Floats
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Rules for arithmetic operations.
\end_layout

\begin_layout Itemize
Results are confined to 
\emph on
actual
\emph default
 address ranges.
\end_layout

\begin_layout Itemize
Results are 
\emph on
always exact
\emph default
.
\end_layout

\begin_layout Itemize
Types are 
\emph on
always correct
\emph default
.
\end_layout

\begin_layout Itemize
Operands are 
\emph on
never floats
\emph default
.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Unit Testing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Unit testing a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Itemize
Check that it works on 0.
\end_layout

\begin_layout Itemize
Check multiple bases.
\end_layout

\begin_layout Itemize
Check converting large values to small bases and small values to large bases.
\end_layout

\begin_layout Itemize
Check exceptions.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
A Few Simple Unit Tests in Pytest Style
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

def test():
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(0, 2) == []
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(0, 1024) == []
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(3, 2) == [1, 1]
\end_layout

\begin_layout Plain Layout

    assert convert_from_nat(2, 3) == [2]
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Unit Tests are a Good Idea
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
They are 
\emph on
much
\emph default
 better than nothing and there is good library support in Python
\begin_inset Foot
status open

\begin_layout Plain Layout
Pytest: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pytest.org/latest/
\end_layout

\end_inset

 or the Python unittest package
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
They are an 
\emph on
implicit
\emph default
 and 
\emph on
partial
\emph default
 specification of the code they test.
\end_layout

\begin_layout Itemize
They catch a surprising number of bugs in the code they test.
\end_layout

\begin_layout Itemize
They catch regressions in new versions.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Hypothesis Testing (1)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Using Hypothesis to test a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Enumerate
Come up with a specification.
\end_layout

\begin_layout Enumerate
Express the specification in Python.
\end_layout

\begin_layout Enumerate
Use Hypothesis to test that the specification holds.
\end_layout

\begin_layout Theorem
\begin_inset Formula $\forall v,\forall b,\mathtt{convert\_to\_nat}(\mathtt{convert\_from\_nat}(v,b),b)=v)$
\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   value=strategies.integers(min_value=0),
\end_layout

\begin_layout Plain Layout

   base=strategies.integers(min_value=2)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

def test(value, base):
\end_layout

\begin_layout Plain Layout

    result = convert_from_nat(value, base)
\end_layout

\begin_layout Plain Layout

    assert convert_to_nat(result, base) == value
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Hypothesis Testing (2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Using Hypothesis to test a simple 
\family typewriter
convert_from_nat()
\family default
 function.
\end_layout

\begin_layout Theorem
No leading zeros in result of 
\family typewriter
convert_from_nat()
\family default
 function.
 This is a generalization of 
\begin_inset Formula $\forall b,\mathtt{convert\_from\_nat}(0,b)=\mathtt{[]}.$
\end_inset


\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   value=strategies.integers(min_value=0),
\end_layout

\begin_layout Plain Layout

   base=strategies.integers(min_value=2)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

def test(value, base):
\end_layout

\begin_layout Plain Layout

    result = convert_from_nat(value, base)
\end_layout

\begin_layout Plain Layout

    assert result == [] or result[0] != 0
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
What Hypothesis Does with This Test Code
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Hypothesis generates, runs, and remembers tests to check the specified propertie
s.
\end_layout

\begin_layout Enumerate
It makes arguments for your test functions using the strategies specified.
\end_layout

\begin_layout Enumerate
It runs tests for these arguments.
\end_layout

\begin_layout Enumerate
It reports the results, stopping on the first failure, if any.
\end_layout

\begin_layout Enumerate
It stores the tests in a database, remembering the result.
\end_layout

\begin_layout Standard
This is not a description of the implementation, just a simplified description
 of what the user experiences.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Property-Based Testing is a 
\emph on
Great
\emph default
 Idea
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Especially with Hypothesis.
\end_layout

\begin_layout Standard
Hypothesis tests:
\end_layout

\begin_layout Itemize
are an 
\emph on
explicit
\emph default
 and 
\emph on
partial
\emph default
 specification of the code they test.
\end_layout

\begin_layout Itemize
catch more bugs than unit tests with less test code
\end_layout

\begin_layout Itemize
employ code reuse in the choice of examples
\end_layout

\begin_layout Itemize
favor examples that previously failed, enabling a simple-minded approach
 to debugging
\begin_inset Foot
status open

\begin_layout Plain Layout
Does not work with CI, but nice when debugging on a personal machine.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
are highly configurable
\end_layout

\begin_layout Itemize
and so much more
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Property-Based Testing is not Easy
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Even with Hypothesis, the upfront costs are higher than with unit testing.
\end_layout

\begin_layout Standard
A partial list of difficulties:
\end_layout

\begin_layout Itemize
It may be difficult to come up with a useful specification
\begin_inset Foot
status open

\begin_layout Plain Layout
You can always cheat with unit tests.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
It may be difficult to express that specification in Python.
\end_layout

\begin_layout Itemize
It may be hard to test that specification in a reasonable amount of time.
\end_layout

\begin_layout Itemize
It may be that Hypothesis does not have a strategy for generating the values
 needed as arguments to the specification
\begin_inset Foot
status open

\begin_layout Plain Layout
Hypothesis has some strategies for composing other strategies; I have yet
 to require a custom strategy.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
But the gains are, typically, very great.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
I Was Wrong...
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
I used to believe that property-based testing was only good for purely functiona
l applications.
\end_layout

\begin_layout Standard
Reasons:
\end_layout

\begin_layout Itemize
I was first introduced to property-based testing in Haskell
\begin_inset Foot
status open

\begin_layout Plain Layout
Haskell's QuickCheck is the original implementation of this idea.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Examples are typically in mathematics or Haskelly sorts of applications.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
...but Now I Know Better
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
I have used Hypothesis successfully with pyudev, a library that wraps libudev.
\end_layout

\begin_layout Standard
When I took over this library from the previous implementer, I found that
 he had been using property-based testing all along! All I needed to do
 was Hypothesize it.
\end_layout

\begin_layout Standard
Basic principles of property-based testing on libudev:
\end_layout

\begin_layout Itemize
Run on a real system, using output of 
\family typewriter
udevadm info
\family default
 as oracle.
\end_layout

\begin_layout Itemize
Mock what needs to be mocked.
\end_layout

\begin_layout Itemize
Check pyudev functions against themselves.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Pyudev Hypothesis Testing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Testing pyudev against itself 
\begin_inset Foot
status open

\begin_layout Plain Layout
More examples at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/pyudev/pyudev
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout ExampleBlock
\begin_inset Argument 2
status open

\begin_layout Plain Layout
A Simple Test Using Hypothesis
\end_layout

\end_inset


\begin_inset listings
lstparams "language=Python,basicstyle={\footnotesize},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

@given(
\end_layout

\begin_layout Plain Layout

   _CONTEXT_STRATEGY,
\end_layout

\begin_layout Plain Layout

   strategies.sampled_from(_DEVICES)
\end_layout

\begin_layout Plain Layout

)
\end_layout

\begin_layout Plain Layout

@settings(max_examples=5)
\end_layout

\begin_layout Plain Layout

def test_from_name(self, a_context, a_device):       
\end_layout

\begin_layout Plain Layout

   new_device = Devices.from_name(
\end_layout

\begin_layout Plain Layout

      a_context,
\end_layout

\begin_layout Plain Layout

      a_device.subsystem,
\end_layout

\begin_layout Plain Layout

      a_device.sys_name
\end_layout

\begin_layout Plain Layout

   )
\end_layout

\begin_layout Plain Layout

   assert new_device == a_device
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock

\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Benefits of Hypothesizing the Tests
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
What was gained by using Hypothesis.
\end_layout

\begin_layout Itemize
If the test couldn't be run, usually because no device with the correct
 properties was available, get 1 skip message, not 100.
\end_layout

\begin_layout Itemize
Test code is clearer.
\end_layout

\begin_layout Itemize
Debugging is faster.
\end_layout

\begin_layout Itemize
etc.
\end_layout

\begin_layout Standard
Found a few signficant bugs in pyudev, a few significant problems in libudev,
 and a significant problem with udev DEVLINKS property in the presence of
 multipath.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Summary
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Property-based testing is great and so is Hypothesis.
\end_layout

\begin_layout Standard
For all the reasons mentioned above:
\end_layout

\begin_layout Itemize
memoization of examples that refute the specification
\end_layout

\begin_layout Itemize
an explicit specification
\end_layout

\begin_layout Itemize
etc.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not Discussed (1)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Property-based testing in other languages.
\end_layout

\begin_layout Itemize
Proof of concept of Hypothesis in Java
\begin_inset Foot
status open

\begin_layout Plain Layout
I haven't tried it.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Property-based testing in 
\emph on
many
\emph default
 other languages
\begin_inset Foot
status open

\begin_layout Plain Layout
It's been tried and there is a list with estimates of quality at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

hypothesis.works
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not Discussed (2)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Other Hypothesis features.
\end_layout

\begin_layout Itemize
Hypothesis's example minimization
\begin_inset Foot
status open

\begin_layout Plain Layout
I think my examples tend to be minimized by definition, although I'm not
 sure.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
The 
\family typewriter
note()
\family default
 function, for displaying additional information about a failing test
\begin_inset Foot
status open

\begin_layout Plain Layout
I don't use this often, because the way Hypothesis identifies counter-examples
 is usually enough.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Hypothesis' higher-order strategies
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
For example, builds()
\family default
 makes a strategy by applying a function to the values generated by other
 strategies.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
How to write your own strategy
\begin_inset Foot
status open

\begin_layout Plain Layout
I haven't had a reason to yet, the higher-order strategies have been enough.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Configuring Hypothesis globally or per-test
\begin_inset Foot
status open

\begin_layout Plain Layout
For example, setting 
\family typewriter
max-examples
\family default
 limits the number of examples tried per-test or per-run.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Using Hypothesis interactively, or just using its strategies
\begin_inset Foot
status open

\begin_layout Plain Layout
If you just want to interact with objects generated by a strategy within
 the Python interpreter, that is an option, too.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not Discussed (3)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Property-based testing challenges and strategies.
\end_layout

\begin_layout Itemize
Testing GUIs
\begin_inset Foot
status open

\begin_layout Plain Layout
I'm not often involved in writing Python GUIs.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Using coverage
\begin_inset Foot
status open

\begin_layout Plain Layout
http://coverage.readthedocs.io/en/coverage-4.0.3/index.html
\end_layout

\end_inset

 and Hypothesis together
\begin_inset Foot
status open

\begin_layout Plain Layout
It is often meaningful when you run 100 tests on a method, and some portion
 of the method is not covered.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Using custom strategies to generate mock objects.
\end_layout

\begin_layout Itemize
Stateful testing
\begin_inset Foot
status open

\begin_layout Plain Layout
Hypothesis has a way of, essentially, dynamically checking class invariants.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Not Discussed (4)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Technical Remarks.
\end_layout

\begin_layout Itemize
Hypothesis works with pytest and with unittest.
\end_layout

\begin_layout Itemize
Hypothesis Python version support: 2.7, 3.4 and 3.5, Legacy 2.6
\end_layout

\begin_layout Itemize
Hypothesis Python compiler support: CPython and PyPy.
\end_layout

\begin_layout Itemize
Hypothesis is used to test itself.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Future
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
The gravy train won't keep going forever.
\end_layout

\begin_layout Itemize
Developing Hypothesis is a full-time job for David MacIver, but nobody's
 paying for it.
\end_layout

\begin_layout Itemize
Teaching Hypothesis is a well, but irregularly paying gig.
\end_layout

\begin_layout Standard
Come August, Hypothesis will turn from a job into a hobby for David MacIver
 unless Hypothesis related cash-flow improves.
 Is there anything that users can do about that
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.drmaciver.com/2016/04/brand-split
\end_layout

\end_inset

/
\end_layout

\end_inset

? Is open-source not really working very well if nothing can be done
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.drmaciver.com/2016/04/writing-libraries-is-terrible/
\end_layout

\end_inset


\end_layout

\end_inset

?
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Thanks
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout FrameSubtitle
Any questions?
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_body
\end_document
